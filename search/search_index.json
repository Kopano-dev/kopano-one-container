{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Running Kopano One in a container \u00b6 This project provides a container image that can be used to run Kopano One on various container runtimes. The image contains all components for a Kopano One deployment including database, mail transport and user management.","title":"Home"},{"location":"#running_kopano_one_in_a_container","text":"This project provides a container image that can be used to run Kopano One on various container runtimes. The image contains all components for a Kopano One deployment including database, mail transport and user management.","title":"Running Kopano One in a container"},{"location":"configuration/","text":"Configure Kopano One Container \u00b6 The Kopano One container is based on baseimage-docker by Phusion . Creating users \u00b6 This container uses kidm for user management. At this point in time kidm only has a command line interface. Add new users using the gen newusers command \u00b6 Kidmd provides a way to create ldif data for new users using a batch mode similar to the unix newusers command using the following standard password file format: uid:userPassword:uidNumber:gidNumber:cn,[mail][,kopanoAliases...]:ignored:ignored For example, like this: cat <<EOF | kopano-kidmd gen newusers - --min-password-strength=4 > /etc/kopano/kidm/ldif/main.d/50-users.ldif jonas:passwordOfJonas123:::Jonas Brekke,jonas@kopano.local:: timmothy:passwordOfTimmothy456:::Timmothy Sch\u00f6walter:: EOF This outputs an LDIF template file which you can modify as needed. When done service restart kopano-kidmd to make the new users available. Keep in mind that some of the attributes must be unique. Quick start with demo users \u00b6 To add the standard Kopano demo users use the following command (you might want to remove existing ldif configuration with rm /etc/kopano/kidm/ldif/main.d/*.ldif before generating the demo users to avoid conflicts). /usr/share/kopano-kidmd/generate-demo-users-ldif > /etc/kopano/kidm/ldif/main.d/10-main.ldif This script generates a ldif template, which uses the global configuration values for base DN and mail domain automatically. Demo users all have a password that is identical to the username, e.g. the password for user1 is user1 . The user user23 is setup to be an admin within Kopano. Database \u00b6 The bundled database is initialised with a random root password and preconfigured to allow the user kopano passwordless access to the database kopano through the unix socket. The generated password is printed during the initial start of the container: kopano-one_1 | xxxx-xx-xx xx:xx:xx+00:00 [Note] [Entrypoint]: GENERATED ROOT PASSWORD: f#bZq<8gCLR~:1I#QQ!EQM77|-[nR^W= kopano-one_1 | kopano-one_1 | xxxx-xx-xx xx:xx:xx+00:00 [Note] [Entrypoint]: /usr/local/bin/mariadb-entrypoint.sh: running /docker-entrypoint-initdb.d/kopano-user.sql Database backup \u00b6 TODO the below commands gives an access denied error mysqldump --user=kopano --protocol=socket -S /var/run/mysqld/mysqld.sock kopano Disabling startup of the bundled database \u00b6 To prevent the MariaDB service from starting with the container simply create an empty file called /etc/service/mariadb/down . Example: FROM kopano/kopano-one:latest RUN touch /etc/service/mariadb/down Prevent individual services from starting \u00b6 This container image uses runit / runsv for process managment. To prevent a given service from starting at container startup, simply create an empty file called down in /etc/service/<name-of-service> . Read more about runit at runit - a UNIX init scheme with service supervision .","title":"Configuration"},{"location":"configuration/#configure_kopano_one_container","text":"The Kopano One container is based on baseimage-docker by Phusion .","title":"Configure Kopano One Container"},{"location":"configuration/#creating_users","text":"This container uses kidm for user management. At this point in time kidm only has a command line interface.","title":"Creating users"},{"location":"configuration/#add_new_users_using_the_gen_newusers_command","text":"Kidmd provides a way to create ldif data for new users using a batch mode similar to the unix newusers command using the following standard password file format: uid:userPassword:uidNumber:gidNumber:cn,[mail][,kopanoAliases...]:ignored:ignored For example, like this: cat <<EOF | kopano-kidmd gen newusers - --min-password-strength=4 > /etc/kopano/kidm/ldif/main.d/50-users.ldif jonas:passwordOfJonas123:::Jonas Brekke,jonas@kopano.local:: timmothy:passwordOfTimmothy456:::Timmothy Sch\u00f6walter:: EOF This outputs an LDIF template file which you can modify as needed. When done service restart kopano-kidmd to make the new users available. Keep in mind that some of the attributes must be unique.","title":"Add new users using the gen newusers command"},{"location":"configuration/#quick_start_with_demo_users","text":"To add the standard Kopano demo users use the following command (you might want to remove existing ldif configuration with rm /etc/kopano/kidm/ldif/main.d/*.ldif before generating the demo users to avoid conflicts). /usr/share/kopano-kidmd/generate-demo-users-ldif > /etc/kopano/kidm/ldif/main.d/10-main.ldif This script generates a ldif template, which uses the global configuration values for base DN and mail domain automatically. Demo users all have a password that is identical to the username, e.g. the password for user1 is user1 . The user user23 is setup to be an admin within Kopano.","title":"Quick start with demo users"},{"location":"configuration/#database","text":"The bundled database is initialised with a random root password and preconfigured to allow the user kopano passwordless access to the database kopano through the unix socket. The generated password is printed during the initial start of the container: kopano-one_1 | xxxx-xx-xx xx:xx:xx+00:00 [Note] [Entrypoint]: GENERATED ROOT PASSWORD: f#bZq<8gCLR~:1I#QQ!EQM77|-[nR^W= kopano-one_1 | kopano-one_1 | xxxx-xx-xx xx:xx:xx+00:00 [Note] [Entrypoint]: /usr/local/bin/mariadb-entrypoint.sh: running /docker-entrypoint-initdb.d/kopano-user.sql","title":"Database"},{"location":"configuration/#database_backup","text":"TODO the below commands gives an access denied error mysqldump --user=kopano --protocol=socket -S /var/run/mysqld/mysqld.sock kopano","title":"Database backup"},{"location":"configuration/#disabling_startup_of_the_bundled_database","text":"To prevent the MariaDB service from starting with the container simply create an empty file called /etc/service/mariadb/down . Example: FROM kopano/kopano-one:latest RUN touch /etc/service/mariadb/down","title":"Disabling startup of the bundled database"},{"location":"configuration/#prevent_individual_services_from_starting","text":"This container image uses runit / runsv for process managment. To prevent a given service from starting at container startup, simply create an empty file called down in /etc/service/<name-of-service> . Read more about runit at runit - a UNIX init scheme with service supervision .","title":"Prevent individual services from starting"},{"location":"docker-compose/","text":"docker-compose \u00b6 In this folder you will find an example deployment of the Kopano One container for docker-compose , along with a minimal configuration example of the bundled services. The files in this example should not be used directly, but merely serve as an inspiration. Design goals of this project \u00b6 configuration via pre-created config files no more auto configuration \"magic\" ability to run all Kopano components in a single container use init system in container to easily restart/reload individual services healthchecks for container Prometheus statistics https://stash.kopano.io/projects/KC/repos/prometheus-kopano-exporter/browse use unix sockets wherever possible (database, mta, kopano services itself) simple mail setup using KETS for mail handling have deployment examples in subfolders (e.g. Univention, Synology, ...) tooling for automatic building and deployment Optional: ability to run fetchmail to get mail from existing mailboxes have the container running read-only and with minimal capabilities","title":"Docker-compose"},{"location":"docker-compose/#docker-compose","text":"In this folder you will find an example deployment of the Kopano One container for docker-compose , along with a minimal configuration example of the bundled services. The files in this example should not be used directly, but merely serve as an inspiration.","title":"docker-compose"},{"location":"docker-compose/#design_goals_of_this_project","text":"configuration via pre-created config files no more auto configuration \"magic\" ability to run all Kopano components in a single container use init system in container to easily restart/reload individual services healthchecks for container Prometheus statistics https://stash.kopano.io/projects/KC/repos/prometheus-kopano-exporter/browse use unix sockets wherever possible (database, mta, kopano services itself) simple mail setup using KETS for mail handling have deployment examples in subfolders (e.g. Univention, Synology, ...) tooling for automatic building and deployment Optional: ability to run fetchmail to get mail from existing mailboxes have the container running read-only and with minimal capabilities","title":"Design goals of this project"},{"location":"docker-compose/config/licenses/","text":"Store license file retrieved from https://kopano.com/downloads-demo/ here","title":"Index"}]}